{"version":3,"sources":["android_inflater_util.js","app.js","java_declaration_parser.js","android_inflate_xml.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACphfile":"app.js","sourcesContent":["String.prototype.capitalize = String.prototype.capitalize || function(){\n\tvar split = this.split(' ').filter(Boolean);\n\tvar len = split.length;\n\tvar capitalized_string = '';\n\tfor (var i=0;i<len;i++) {\n\t\tcapitalized_string = capitalized_string + split[i].charAt(0).toUpperCase() + split[i].slice(1).toLowerCase() + \" \";\n\t}\n\treturn capitalized_string.slice(0, capitalized_string.length-1);\n}\n//converts string with underscores to camelCase. string is the same if the string doesn't contain underscores or only contains a leading underscore e.g. _hello\nString.prototype.to_camelCase = String.prototype.to_camelCase || function(){\n    var split = this.split('_').filter(Boolean);\n    var len = split.length;\n    var camelCaseString = '';\n    for (var i=0;i<len;i++) {\n        if(i===0){\n            camelCaseString = camelCaseString + split[i].toLowerCase();\n        }\n        else{\n            camelCaseString = camelCaseString + split[i].capitalize();    \n        }\n    }\n    return camelCaseString;\n}\n//to map array-like objects such as collections- returns array with function applied\nfunction map_collection(collection, callback){\n    var len = collection.length;\n    var newArray = [];\n    for(var i=0; i<len;i++){\n        newArray.push(callback(collection[i]));\n    }\n    return newArray;\n}\n\n//returns cross browser compatible (back to i.e. 6) xml dom object from xml string\nvar parseXML = (function(){\n\n    if (typeof window.DOMParser != \"undefined\") {\n        return function(xmlStr) {\n            return ( new window.DOMParser() ).parseFromString(xmlStr, \"text/xml\");\n        };\n    } else if (typeof window.ActiveXObject != \"undefined\" &&\n           new window.ActiveXObject(\"Microsoft.XMLDOM\")) {\n        return function(xmlStr) {\n            var xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n            xmlDoc.async = \"false\";\n            xmlDoc.loadXML(xmlStr);\n            return xmlDoc;\n        };\n    } else {\n        throw new Error(\"No XML parser found\");\n    }\n})();","(function(){\n\tvar app = angular.module('AndroidInflater', []);\n\tapp.controller('TabController', ['$scope', function($scope) {\n\t\tvar tabCtlr = this;\n\t\t$scope.currentTab = 0;\n\t\tthis.visibility_options = [{label : 'private', value : 'private'}, {label : 'public', value : 'public'}, {label : 'none', value : ''}];\n  \t\t$scope.xml_opt_visibility = this.visibility_options[0].value;\n\t\t$scope.xml_options = {\n\t\t\tcamelCase : false,\n\t\t\tdeclareInline : false,\n\t\t\tvisibility : $scope.xml_opt_visibility,\n\t\t\tmakeFinal : false,\n\t\t\taddButtonOnClickListener : false\n\t\t};\n\t\t$scope.var_declaration_options = {\n\t\t\tdeclareInline : false,\n\t\t\taddButtonOnClickListener : true,\n\t\t\tcamelCase : false,\n\t\t\tmakeFinal : false\n\t\t};\n\t\t$scope.xml_output = '';\n\t\t$scope.var_declaration_output = '';\n\n\t\t$scope.setTab = function(num){\n\t\t\t$scope.currentTab = num;\n\t\t\tvar output_data = num === 0 ? $scope.xml_output : $scope.var_declaration_output;\n\t\t\tif(!output_data){\n\t\t\t\t$scope.$apply();\n\t\t\t\ttabCtlr.selectInput();\n\t\t\t}\n\t\t};\n\t\t$scope.showTab = function(num){return num === $scope.currentTab;};\n\t\t$scope.inflate = function(input_id, output_id) {\n\t\t\t\tvar no_input_error_xml = 'Paste into the input box an Android layout or resource xml file';\n\t\t\t\tvar no_input_error_java = 'Paste into the input box Java variable declarations';\n\t\t\t\tif($scope.currentTab === 0)  {\n\t\t\t\t\tvar options = $scope.xml_options;\n\t\t\t\t\toptions.visibility = $scope.xml_opt_visibility;\n\t\t\t\t\tvar input_val = document.getElementById('xml_input').value;\n\t\t\t\t\tif(input_val.match(/^$|^[\\s\\t\\n]+$/)){\n\t\t\t\t\t\t$scope.xml_output = no_input_error_xml;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tvar inflated_xml = android_inflate_xml.element_list_from_xml(input_val, options);\n\t\t\t\t\t\t\t$scope.xml_output = inflated_xml.declaration + '\\n\\n' + inflated_xml.inflated_java;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(err){\n\t\t\t\t\t\t\t$scope.xml_output = \"Could not be parsed:\\n\" + input_val;\t\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tvar options = $scope.var_declaration_options;\n\t\t\t\t\tvar input_val = document.getElementById('java_input').value;\n\t\t\t\t\tif(input_val.match(/^$|^[\\s\\t\\n]+$/)){\n\t\t\t\t\t\t$scope.var_declaration_output = no_input_error_java;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tvar element_array = java_declaration_parser.element_array_from_declaration(input_val, options);\n\t\t\t\t\t\t$scope.var_declaration_output = android_inflate_xml.inflate_element_list(element_array, options);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t$scope.inline_checked_action = function(){\n\t\t\t//set visibility options to none if declare inline is selected on xml tab since that is most likely what the user wants\n\t\t\tif($scope.xml_options.declareInline){\n\t\t\t\t$scope.xml_opt_visibility = '';\n\t\t\t}\n\t\t};\n\t\t\n\t\t$scope.selectResults = function(){\n\t\t\t\tvar id_to_by_selected = $scope.currentTab === 0 ? 'xml_output' : 'java_output';\n\t\t\t\ttabCtlr.select_textarea(id_to_by_selected);\n\t\t\t};\n\t\tthis.selectInput = function(){\n\t\t\t\tvar id_to_by_selected = $scope.currentTab === 0 ? 'xml_input' : 'java_input';\n\t\t\t\ttabCtlr.select_textarea(id_to_by_selected);\n\t\t\t};\n\t\tthis.select_textarea = function(id_to_by_selected){\n\t\t\tdocument.getElementById(id_to_by_selected).select();\n\t\t};\n\t\tthis.init = function(){\n\t\t\ttabCtlr.selectInput();\n\t\t};\n\t\tthis.init();\n\n\n\t}]);\n\n\n\t\n})();","/***element_array_from_declaration is used to turn string of java variable declarations into an array of objects\n//e.g. takes \"public final String one; private static TextView two;\" and returns [{type : 'TextView', identifier : 'one'}, {type : 'String', identifier : 'one'},  {type : 'String', identifier : 'two'},  {type : 'String', identifier : 'three'}]\n\n//***the options object is used for formatting and code generation options\n//an empty object {} will work if you have no options\n//the full options example:\n\t{\n\taddButtonOnClickListener : true, //generates OnClickListener for button objects - values are true or false\n\tdeclareInline : true //declares java inline e.g. returns final String one = etResources().getString(R.string.one);\n\t}\n*/\nvar java_declaration_parser = (function(){\n\t//main driver function\n\treturn {\n\t\telement_array_from_declaration: function (input, options){\n\t\treturn get_element_array(input, options);\n\t\t}\n\t};\n\n\t//generates inflated code string based on variable type\n\tfunction get_element_array(java_text, options){\n\t\tvar var_array = java_string_to_array_sans_comments(java_text);\n\t\tvar hash_array = var_array_to_hash_array(var_array);\n\t\treturn hash_array;\n\t}\n\n\t//takes string of java text and returns array of cleaned up variables with comments removed\n\t//e.g. \"public final String one; private static TextView two;\" and returns ['String one', 'TextView two']\n\tfunction java_string_to_array_sans_comments(java_text){\n\t\t//1.strips multi-line comments (see http://ostermiller.org/findcomment.html) 2.strips beginning space, single-line comments and reserved words as they are unneeded and make parsing later easier 3. removes extra white-space between variables; 4. removes extra white-space within variables; 5. splits variables on semi-colon 6.filters out empty strings in array; \n\t\tvar split_text = java_text.replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*\\/]|[\\r\\n])))*\\*+\\//g, ' ').replace(/\\/\\/(.)*\\n|\\/\\/(.)*$|\\bstatic\\b|\\bfinal\\b|\\bpublic\\b|\\bprivate\\b|\\bprotected\\b|^\\s+/g, \"\").replace(/[\\s]*;[^A-Z\\/]*/gi, ';').replace(/\\s+/g, ' ').split(';').filter(Boolean);\n\t\treturn split_text;\n\t} \n\t//takes array of split java variable e.g. ['TextView one', 'String one, two, three'] and returns [{type : 'TextView', identifier : 'one'}, {type : 'String', identifier : 'one'},  {type : 'String', identifier : 'two'},  {type : 'String', identifier : 'three'}]\n\tfunction var_array_to_hash_array(var_array){\n\t\tvar hash_array = var_array.map(function(var_string){\n\t\t\treturn var_string_to_hash(var_string);\n\t\t});\n\t\t//String one, two, three is returned as [{type : 'String', identifier : 'one'}, {type : 'String', identifier : 'two'},  {type : 'String', identifier : 'three'}] within list so this flattens the list\n\t\tvar merged = [];\n\t\treturn merged.concat.apply(merged, hash_array);\n\t}\n\n\t//creates object by parsing string for name and data-type \n\t//e.g. 'String one' returns {'type' : 'String', 'identifier' : 'one'}\n\tfunction var_string_to_hash(var_string){\n\t\tvar var_hash = {};\n\t\tif(var_string.match(/^\\/\\//)){\n\t\t\tvar_hash.comment = true;\n\t\t\tvar_hash.identifier = var_string;\n\t\t\treturn var_hash;\n\t\t}\n\t\tvar var_split = var_string.split(' ').filter(Boolean);\n\t\t//test for String one, two, three;\n\t\tvar nested_array_dec = split_nested_var_declarations([var_split.shift(), var_split.join('')]);\n\t\tif(nested_array_dec){\n\t\t\treturn nested_array_dec;\n\t\t}\n\t\tvar_split = var_string.split(' ').filter(Boolean); //because was mutilated earlier\n\t\tif(var_split.length === 2){\n\t\t\t//e.g. String name;\n\t\t\tvar_hash.type = var_split[0];\n\t\t\tvar_hash.identifier = var_split[1];\n\t\t}\n\t\telse{\n\t\t\tvar_hash.invalid = true;\t\n\t\t\tvar_hash.identifier = var_string;\n\t\t}\n\n\t\treturn var_hash;\n\t}\n\n\t//splits String one, two, three into:\n\t//String one; String two; String three;\n\t//return array of objects [{type:'String', name:'one'}, {type:'String', name:'two'}, {type:'String', name:'three'}]\n\tfunction split_nested_var_declarations(var_array){\n\t\tif(var_array.length < 2){\n\t\t\treturn false;\n\t\t}\n\t\tvar name_split = var_array[1].split(',').filter(Boolean);\n\t\tif(name_split.length === 1){\n\t\t\treturn false;\n\t\t}\n\t\telse{\n\t\t\tvar type = var_array[0];\n\t\t\tvar var_hash_array = name_split.map(function(var_sub_array_element){\n\t\t\t\treturn {\n\t\t\t\t\t'type': type,\n\t\t\t\t\t'identifier' : var_sub_array_element\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn var_hash_array;\n\t}\n\n})();\n","/*\n//***element_list_form_xml returns a list of parsed variables from an Android layout or resources xml string\n//e.g. returns [{type : 'TextView', identifier : 'one'}, {type : 'String', identifier : 'one'},  {type : 'String', identifier : 'two'},  {type : 'String', identifier : 'three'}]\n\n//***inflate_element_list returns java code from an element list\n//e.g. from [{type : 'String', identifier : 'one'}] returns one = getResources().getString(R.string.one);\n\n//***the options object is used for formatting and code generation options\n//an empty object {} will work if you have no options\n//the full options example:\n\t{\n\tcamelCase : true,  //converts underscore variable names to camelCase, ignores if only leading underscore _hello - values are true or false\n\tmakeFinal : true   //adds final to variable declaration - values are true or false\n\taddButtonOnClickListener : true, //generates OnClickListener for button objects - values are true or false\n\tvisibility : 'private' //adds visibility to variable declaration - values are 'private', 'public', '' or null for no visibility\n\tdeclareInline : true //declares java inline e.g. returns final String one = etResources().getString(R.string.one);\n\t}\n*/\nvar android_inflate_xml = (function(){\n\treturn {'element_list_from_xml' : function(xmlStr, options){\n\t\t\treturn inflated_xml(xmlStr, options);\n\t\t},\n\t\t'inflate_element_list' : function(element_list, options){\n\t\t\treturn options.declareInline ? element_list_to_inflated_java_inline(element_list, options, 'RelativeLayout') : element_list_to_inflated_java(element_list, options);\n\t\t}\n\t};\n\n\tfunction element_list_to_inflated_java_inline(element_list, options, parent_element_name){\n\t\tvar inflated_java = parent_element_name === 'resources' ? get_string_from_resources_comment(options) : get_inflation_start_comment(options);\n\t\telement_list.map(function(element){\n\t\t\tinflated_java = inflated_java + get_element_declaration_string(element, options).replace(';', '') + ' =' + get_unpacked_element_string(element, options).replace(/^.*=/, '');\n\t\t\tif(element.type === 'Button' && options.addButtonOnClickListener){\n\t\t\t\tinflated_java = inflated_java + '\\n' + add_button_on_click_listener(element, options);\n\t\t\t}\n\t\t\tinflated_java = inflated_java + '\\n';\n\t\t});\n\n\t\treturn inflated_java;\n\t}\n\n\tfunction element_list_to_inflated_java(element_list, options){\n\t\tvar inflated_java = get_inflation_start_comment(options);\n\t\telement_list.map(function(element){\n\t\t\tinflated_java = inflated_java + get_unpacked_element_string(element, options);\n\t\t\tif(element.type === 'Button' && options.addButtonOnClickListener){\n\t\t\t\tinflated_java = inflated_java + '\\n' + add_button_on_click_listener(element, options);\n\t\t\t}\n\t\t\tinflated_java = inflated_java + '\\n';\n\t\t});\n\n\t\treturn inflated_java;\n\t}\n\t//used by element_list_to_inflated_java and element_list_to_inflated_java_inline\n\tfunction get_unpacked_element_string(element, options){\n\t\tif(element.invalid){\n\t\t\t\treturn unpack_invalid_data(element, options);\n\t\t\t}\n\t\t\telse if(element.type === 'String'){\n\t\t\t\treturn unpack_res_string(element, options);\n\t\t\t}\n\t\t\telse if(element.type === 'int'\n\n\t\t\t\t){\n\t\t\t\treturn unpack_res_int(element, options);\n\t\t\t}\n\t\t\telse if(element.type === 'bool'){\n\t\t\t\treturn unpack_res_bool(element, options);\n\t\t\t}\n\t\t\telse if(element.type === 'double'){\n\t\t\t\treturn unpack_res_double(element, options);\n\t\t\t}\n\t\t\telse if(element.type.match(/\\[\\]$/)){\n\t\t\t\treturn unpack_res_array(element, options);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn unpack_ui_element(element, options);\n\t\t\t}\n\t}\n\n\t//used for constants\n\tfunction get_inflation_start_comment(options){\n\t\treturn \"//Inflate UI\\n\";\n\t}\n\tfunction get_string_from_layout_comment(options){\n\t\treturn '//Declare UI elements\\n';\n\t}\n\tfunction get_string_from_resources_comment(options){\n\t\treturn '//Declare resources\\n';\n\t}\n\tfunction get_formatted_name(element, options){\n\t\tvar formatted_name = options.camelCase ? element.identifier.to_camelCase() : element.identifier;\n\t\treturn formatted_name;\n\t}\n\t//methods unpack elements based on type\n\tfunction unpack_ui_element(element, options){\n\t\treturn get_formatted_name(element, options) + \" = (\" + element.type + \") findViewById(R.id.\" + element.identifier + \");\";\n\t}\n\n\tfunction add_button_on_click_listener(element, options){\n\t\treturn get_formatted_name(element, options) + '.setOnClickListener(new View.OnClickListener() {\\n\\tpublic void onClick(View v) {\\n\\t\\t// Perform action on click\\n\\t}\\n});';\n\t}\n\n\tfunction unpack_res_string(element, options){\n\t\treturn get_formatted_name(element, options) + \" = getResources().getString(R.string.\" + element.identifier + \");\";\n\t}\n\t//there is no res double type so we have to convert it from a string\n\tfunction unpack_res_double(element, options){\n\t\treturn get_formatted_name(element, options) + \" = Double.parseDouble(getResources().getString(R.string.\" + element.identifier + \"));\";\n\t}\n\n\tfunction unpack_res_int(element, options){\n\t\treturn get_formatted_name(element, options) + \" = getResources().getInteger(R.integer.\" + element.identifier +  \");\";\n\t}\n\n\tfunction unpack_res_bool(element, options){\n\t\treturn get_formatted_name(element, options) + \" = getResources().getBoolean(R.bool.\" + element.identifier +  \");\";\n\t}\n\n\tfunction unpack_res_array(element, options){\n\t\tvar var_type = element.type.replace(\"[]\", \"\");\n\t\tvar_type = var_type.capitalize();\n\t\treturn get_formatted_name(element, options) + \" = getResources().get\" + var_type + \"Array(R.array.\" + element.identifier + \");\";\n\t}\n\n\tfunction unpack_invalid_data(element, options){\n\t\treturn \"//\" + element.identifier + \" is not a valid declaration\";\n\t}\n\n\t//takes android xml string and returns object with variable declarations and full java code inflation\n\tfunction inflated_xml(xmlStr, options){\n\t\tvar element_list = get_element_array(xmlStr, options);\n\t\tvar parent_element_name = get_doc_element_type(xmlStr);\n\t\tif(options.declareInline){\n\t\t\treturn {'declaration' : element_list_to_inflated_java_inline(element_list, options, parent_element_name), 'inflated_java' : ''};\n\t\t}\n\t\telse{\n\t\t\tvar declaration_string = declaration_string_from_element_list(element_list, options, parent_element_name);\n\t\t\treturn {'declaration' : declaration_string, 'inflated_java' : element_list_to_inflated_java(element_list, options)};\n\t\t}\n\t}\n\t//returns name of parent element of xml document\n\tfunction get_doc_element_type(xmlStr){\n\t\treturn parseXML(xmlStr).documentElement.nodeName;\n\t}\n\t//returns an array of parsed elements from xml string\n\t//e.g. returns [{type : 'TextView', identifier : 'one'}, {type : 'String', identifier : 'one'},  {type : 'String', identifier : 'two'},  {type : 'String', identifier : 'three'}]\n\tfunction get_element_array(xmlStr){\n\t\tvar parsed_xml = parseXML(xmlStr);\n\t\tvar parent_element_name = parsed_xml.documentElement.nodeName;\n\t\tvar node_list = parsed_xml.documentElement.childNodes;\n\t\tvar element_list = [];\n\t\tmap_collection(node_list, function(node){\n\t\t\tcreate_element_array_recursive(node, element_list, parent_element_name);\n\t\t});\n\t\telement_list.filter(Boolean); //just to be sure there is no garbage in array\n\t\treturn element_list;\n\t}\n\t//creates elements array from child nodes by pushing to reference to array passed into function (master_array) -  adds all child nodes of the child nodes using recursion\n\tfunction create_element_array_recursive(node, master_array, parent_element_name){\n\t\tif(node.nodeType === Node.TEXT_NODE || node.nodeType === Node.COMMENT_NODE){return;} //we don't want comments or text nodes inside parent node\n\t\tvar type = parent_element_name === 'resources' && node.nodeName.match(/-array$/) ? xml_array_name_to_java(node.nodeName) : node.nodeName; //formats array name correctly if element is array\n\t\t//format type because xml resources store type as lowercase\n\t\tswitch(type){\n\t\t\tcase 'string':\n\t\t\t\ttype = 'String';\n\t\t\t\tbreak;\n\t\t\tcase 'integer':\n\t\t\t\ttype = 'int';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t//recursively get and push child nodes\n\t\tif(node.childNodes){\n\t\t\tmap_collection(node.childNodes, function(node1){create_element_array_recursive(node1, master_array, parent_element_name)});\n\t\t}\n\t\t//test for valid android elements\n\t\ttry{\n\t\t\tvar id = node.getAttribute('android:id');\n\t\t\tvar name = node.getAttribute('name');\n\t\t\tif(!(id || name)){\n\t\t\t\tthrow \"no id or name - not valid android xml element\";\n\t\t\t}\n\t\t}\n\t\tcatch(err){\n\t\t\treturn;\n\t\t}\n\t\t//ui elements use id while resources use name\n\t\tvar formatted_id = id ? id.replace(/@.*\\//,'') : '';\n\t\tvar identifier = name || formatted_id;\n\t\tmaster_array.push({\n\t\t\t'type' : type,\n\t\t\t'identifier' : identifier\n\t\t});\n\t}\n\n\t//returns string of java variable declarations from element list\n\tfunction declaration_string_from_element_list(element_list, options, parent_element_name){\n\t\tvar declaration_string = parent_element_name === 'resources' ? get_string_from_resources_comment(options) : get_string_from_layout_comment(options);\n\t\telement_list.map(function(element){\n\t\t\tdeclaration_string = declaration_string + get_element_declaration_string(element, options) + '\\n';\n\t\t});\n\t\treturn declaration_string;\t\n\t}\n\t//used by element_list_to_inflated_java_inline and declaration_string_from_element_list\n\tfunction get_element_declaration_string(element, options){\n\t\tvar visibility = options.visibility ? options.visibility + ' ' : '';\n\t\tvar makeFinal = options.makeFinal ? 'final ' : '';\n\t\tvar formatted_identifier = options.camelCase ? element.identifier.to_camelCase() : element.identifier;\n\t\treturn visibility + makeFinal + element.type + \" \" + formatted_identifier + ';';\n\t}\n\n\t//converts string-array to String[]\n\tfunction xml_array_name_to_java(array_name){\n\t\tvar java_array_name = array_name.replace(/-array$/, '');\n\t\tjava_array_name = java_array_name === 'string' ? 'String' : java_array_name;\n\t\treturn java_array_name + '[]';\n\t}\n\n})();"],"sourceRoot":"/source/"}